{"version":3,"sources":["serviceWorker.js","Display.js","Calculator.js","index.js","Button.js"],"names":["Boolean","window","location","hostname","match","Display","props","state","fontSize","prevProps","prevState","snapshot","f","this","formula","length","fs","findIndex","n","console","log","setState","className","style","Component","Calculator","updateFormula","v","c","calculated","elements","map","bc","i","btnCont","forEach","b","j","push","Button","key","type","update","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","keyPressed","e","btnClick","id","isNaN","eval","addEventListener","removeEventListener","onClick","currentTarget"],"mappings":"6JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCYSC,E,YA3BX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,SAAU,IAHC,E,gFAOAC,EAAWC,EAAWC,GACrC,IAEIC,GAAKC,KAAKP,MAAMQ,SAAS,IAAIC,OAC7BC,EAHQ,CAAC,GAAI,GAAI,GAAI,GACd,CAAC,EAAG,GAAI,GAAI,KAEHC,WAAU,SAAAC,GAAC,OAAIN,GAAKM,MAC9B,IAANN,GAAWI,IAAON,EAAUF,WAC5BW,QAAQC,IAAI,oBAAqBJ,GACjCH,KAAKQ,SAAS,CAACb,SAAUQ,O,+BAK7B,OACI,yBAAKM,UAAW,WACZ,wBAAIC,MAAO,CAACf,SAAUK,KAAKN,MAAMC,SAAW,OAAQK,KAAKP,MAAMQ,c,GAtBzDU,a,OCwCPC,E,YArCX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KAOVoB,cAAgB,SAACC,EAAGC,GAChB,EAAKP,SAAS,CAACP,QAASa,EAAGE,WAAYD,KAPvC,EAAKrB,MAAQ,CACTO,QAAS,GACTe,YAAY,GAJD,E,sEAYT,IAAD,OAEDC,EADO,CAAC,CAAC,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IAAK,KAAM,CAAC,MACjFC,KAAI,SAACC,EAAIC,GACzB,IAAIC,EAAU,GASd,OARAF,EAAGG,SAAQ,SAACC,EAAGC,GAAJ,OAAUH,EAAQI,KACzB,kBAACC,EAAA,EAAD,CAAQC,IAAKH,EACLI,KAAML,EACNtB,QAAS,EAAKP,MAAMO,QACpBe,WAAY,EAAKtB,MAAMsB,WACvBa,OAAQ,EAAKhB,oBAIrB,yBAAKc,IAAKP,EAAGX,UAAW,iBAAkBY,MAGlD,OACI,yBAAKZ,UAAW,aACZ,kBAAC,EAAD,CAASR,QAASD,KAAKN,MAAMO,UAC5BgB,O,GAhCQN,a,MCEzBmB,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SH6HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a,ykCIvItBhB,O,kwBACFiB,WAAa,SAACC,GACNA,EAAEjB,MAAQ,MAAKlC,MAAMmC,MACrB,MAAKiB,SAASD,EAAEjB,M,MAYxBkB,SAAW,SAACC,IACR,IAAI9B,WAAa,MAAKvB,MAAMuB,WACxBf,QAAWe,aAAe+B,MAAMD,IAAO,GAAM,MAAKrD,MAAMQ,SAAS,GAErE,IACe,MAAP6C,IACA7C,QAAU,GACVe,YAAa,GACC,MAAP8B,IACP7C,QAAU+C,KAAK/C,SACfe,YAAa,IAEbf,SAAW6C,GACX9B,YAAa,GAEnB,MAAO4B,GACLtC,QAAQC,IAAI,UAAWqC,GACvB3C,QAAU,QACVe,YAAa,EAGjB,MAAKvB,MAAMoC,OAAO5B,QAASe,a,uYA5B3BgB,SAASiB,iBAAiB,UAAWjD,KAAK2C,YAAY,K,6CAItDX,SAASkB,oBAAoB,UAAWlD,KAAK2C,YAAY,K,+BA2BnD,IAAD,OACL,OACI,kEAAKlC,UAAW,SACXqC,GAAI9C,KAAKP,MAAMmC,KACfuB,QAAS,SAACP,GAAD,OAAO,EAAKC,SAASD,EAAEQ,cAAcN,MAE/C,qEAAK9C,KAAKP,MAAMmC,W,QA7CXjB,8CAmDNe,8B","file":"static/js/main.cc7dc25b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\n\nclass Display extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fontSize: 35\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let sizes = [35, 20, 12, 9];\n        let nums = [7, 23, 60, 100];\n        let f = (this.props.formula||'').length;\n        let fs = sizes[nums.findIndex(n => f <= n)];\n        if (f !== 0 && fs !== prevState.fontSize) {\n            console.log(\"Setting fontSize \", fs);\n            this.setState({fontSize: fs});\n        }\n    }\n\n    render() {\n        return (\n            <div className={'display'}>\n                <h1 style={{fontSize: this.state.fontSize + 'pt'}}>{this.props.formula}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Display;\n","import React, {Component} from 'react';\nimport Display from \"./Display\";\nimport Button from \"./Button\";\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            formula: '',\n            calculated: false\n        };\n    }\n\n    updateFormula = (v, c) => {\n        this.setState({formula: v, calculated: c});\n    };\n\n    render() {\n        let buts = [['1', '2', '3', '+'], ['4', '5', '6', '-'], ['7', '8', '9', '*'], ['C', '0', '.', '/'], ['=']];\n        let elements = buts.map((bc, i) => {\n            let btnCont = [];\n            bc.forEach((b, j) => btnCont.push(\n                <Button key={j}\n                        type={b}\n                        formula={this.state.formula}\n                        calculated={this.state.calculated}\n                        update={this.updateFormula}/>\n                )\n            );\n            return (\n                <div key={i} className={'btn-container'}>{btnCont}</div>\n            );\n        });\n        return (\n            <div className={'container'}>\n                <Display formula={this.state.formula}/>\n                {elements}\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from \"./Calculator\";\nimport './style.css';\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\n\nclass Button extends Component {\n    keyPressed = (e) => {\n        if (e.key === this.props.type) {\n            this.btnClick(e.key);\n        }\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", this.keyPressed, false);\n    }\n\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", this.keyPressed, false);\n    }\n\n    btnClick = (id) => {\n        let calculated = this.props.calculated;\n        let formula = (calculated && !isNaN(id)) ? '' : (this.props.formula||'');\n        //console.log('Button clicked: ', id);\n        try {\n            if (id === 'C') {\n                formula = '';\n                calculated = false;\n            } else if (id === '=') {\n                formula = eval(formula);\n                calculated = true;\n            } else {\n                formula += id;\n                calculated = false;\n            }\n        } catch (e) {\n            console.log(\"Error: \", e);\n            formula = \"ERROR\";\n            calculated = true;\n        }\n        //console.log(\"Result: \", formula);\n        this.props.update(formula, calculated);\n    };\n\n    render() {\n        return (\n            <div className={'button'}\n                 id={this.props.type}\n                 onClick={(e) => this.btnClick(e.currentTarget.id)}\n            >\n                <h3>{this.props.type}</h3>\n            </div>\n        );\n    }\n}\n\nexport default Button;\n"],"sourceRoot":""}